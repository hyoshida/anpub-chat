extends ../layout

block append js
  script(src="/socket.io/socket.io.js")

  script.
    function updateCounter() {
      $('#counter').text($('#users li.active').length);
    }

    function addUserToMap(user) {
      // for admin
      var $user_code = $('<dt/>').addClass('code').text(user.code);
      var $user_sep = $('<dd/>').addClass('sep').text('@');
      var $user_name = $('<dd/>').addClass('name').text(user.name || 'Anonymous');

      var $show_field = $('<dl/>').addClass('show_field');
      $show_field.append($user_code);
      $show_field.append($user_sep);
      $show_field.append($user_name);

      var $user_map = $('<div/>').attr('data-user-code', user.code).addClass('user_map');
      $user_map.append($show_field);
      $user_map.appendTo('#users_map');
    }

    $(function() {
      io = io.connect();

      // Listen for user.connect event.
      io.on('user.connect', function(user) {
        $user = $("#users").find('[data-user-code="' + user.code + '"]');
        if (!$user.length) {
          $user = $('<li/>').attr('data-user-code', user.code).text(user.display_name);
        }
        $user.attr('class', 'active');
        $user.prependTo('#users');
        updateCounter();
      });

      // Listen for user.disconnect event.
      io.on('user.disconnect', function(user) {
        $user = $("#users").find('[data-user-code="' + user.code + '"]');
        $user.attr('class', 'inactive');
        $user.appendTo('#users');
        updateCounter();
      });

      // Listen for user.log event.
      io.on('user.log', function(users) {
        $.each(users, function() {
          $user = $('<li/>').attr('data-user-code', this.code).text(this.display_name);
          if (this.active_flag) {
            $user.attr('class', 'active');
            $user.prependTo('#users');
          } else {
            $user.attr('class', 'inactive');
            $user.appendTo('#users');
          }

          addUserToMap(this);
        });
        updateCounter();
      });

      // from http://stackoverflow.com/questions/14645806/get-all-attributes-of-an-element-using-jquery
      (function(old) {
        $.fn.attr = function() {
          if(arguments.length === 0) {
            if(this.length === 0) {
              return null;
            }

            var obj = {};
            $.each(this[0].attributes, function() {
              if(this.specified) {
                obj[this.name] = this.value;
              }
            });
            return obj;
          }

          return old.apply(this, arguments);
        };
      })($.fn.attr);

      function inputStart(element) {
        $element = $(element);
        $input = $('<input/>').attr($element.attr());
        $input.insertAfter($element);
        $input.focus();
        $input.val($element.text());
        $element.addClass('hidden');

        var ime = new LibIME($input);
        ime.onkeyup = function(args) {
          event = args[0];
          switch (ime.status) {
          case 2:
            if (event.keyCode !== 13) return;
            inputComplete($input);
          }
        }
      }

      function inputComplete(input) {
        $input = $(input);
        $element = $input.closest('.show_field').find('.hidden');
        $element.text($input.val());
        $element.removeClass('hidden');
        $input.remove();

        var code = $element.closest('[data-user-code]').attr('data-user-code');
        var attributes = { code: code, value: $element.text() };
        if ($element.attr('class').match(/code/)) {
          attributes.type = 'code';
        } else {
          attributes.type = 'name';
        }
        io.emit('user.edit', JSON.stringify(attributes));
      }

      $(document).on('click', '.show_field :not(input).code, .show_field :not(input).name', function() {
        inputStart(this);
      });

      $(document).on('blur', '.show_field input.code, .show_field input.name', function() {
        inputComplete(this);
      });

      function validateIPaddress(ipaddress) {
        return ipaddress.match(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      }

      $('form').submit(function(event) {
        // stop form from submitting normally
        event.preventDefault();

        var code = $('input.code').val();
        var name = $('input.name').val();

        if (!validateIPaddress(code)) return;
        console.log(code);

        var attributes = { code: code, name: name };
        io.emit('user.new', JSON.stringify(attributes));

        $('input').val('');
      });
    });


block content
  #nav
    #counter
    ul#users
  #contents
    form
      input.code(type="text", placeholder="IP Address")
      .sep @
      input.name(type="text", placeholder="User name")
      input.hidden(type="submit")
    #users_map
